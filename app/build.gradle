plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    //navigation Pass data between destinations
//    id 'androidx.navigation.safeargs'//Java
    id 'androidx.navigation.safeargs.kotlin'
}

ext {
    Debug_properties_file = "https://raw.githubusercontent.com/CMingTseng/Useful_Gradle/master/debug.properties"
    Release_properties_file = Debug_properties_file
}

android {
    compileSdkVersion 32
    buildToolsVersion "32.0.0"
    buildFeatures {
        viewBinding true
    }
    defaultConfig {
        applicationId "com.group.selfie"
        minSdkVersion 23
        targetSdkVersion 32
        versionCode 1
        versionName "1.0"
        multiDexEnabled true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        Properties props = new Properties()
        debug {
            props.load(new URL(this.ext.Debug_properties_file).openStream())
            keyAlias "${props['alias']}"
            keyPassword "${props['key_password']}"
            storePassword "${props['keystore_password']}"
            storeFile file(buildDir.toString() + File.separator + "${props['keystore_file_name']}" + "${props['keystore_file_type']}")
        }

        release {
            props.load(new URL(this.ext.Release_properties_file).openStream())
            keyAlias "${props['alias']}"
            keyPassword "${props['key_password']}"
            storePassword "${props['keystore_password']}"
            storeFile file(buildDir.toString() + File.separator + "${props['keystore_file_name']}" + "${props['keystore_file_type']}")
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/INDEX.LIST'
        exclude 'META-INF/*'
    }
}

dependencies {
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    // coroutine
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutine_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutine_version"

    implementation "androidx.core:core-ktx:$ktx_version"
    implementation "androidx.appcompat:appcompat:$appcompat"
    implementation "androidx.activity:activity-ktx:$activity_ktx_version"
    implementation "com.google.android.material:material:$material"
    implementation "androidx.constraintlayout:constraintlayout:$constraintLayout"
    implementation "androidx.fragment:fragment-ktx:$fragment_version"
    implementation "androidx.navigation:navigation-fragment-ktx:$navigation_version"
    implementation "androidx.navigation:navigation-ui-ktx:$navigation_version"

    implementation 'androidx.multidex:multidex:2.0.1'

    //WindowManager
    implementation "androidx.window:window:$jetpack_windowmanager_version"

    // card view
    implementation "androidx.cardview:cardview:$cardview_version"

    // The following line is optional, as the core library is included indirectly by camera-camera2
    implementation("androidx.camera:camera-core:$jetpack_camera_version")
    implementation("androidx.camera:camera-camera2:$jetpack_camera_version")
    // If you want to additionally use the CameraX Lifecycle library
    implementation("androidx.camera:camera-lifecycle:$jetpack_camera_version")
    // If you want to additionally use the CameraX View class
    implementation("androidx.camera:camera-view:$jetpack_camera_version")
    // If you want to additionally use the CameraX Extensions library
    implementation("androidx.camera:camera-extensions:$jetpack_camera_version")

    // Activity KTX for viewModels()
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$ktx_extensions_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$ktx_extensions_version"

    implementation 'com.google.guava:guava:31.1-android'

    //Flurry
    implementation 'com.flurry.android:analytics:13.0.1'

    implementation 'androidx.multidex:multidex:2.0.1'
    // dagger - Hilt
    implementation "com.google.dagger:hilt-android:$dagger_hilt_version"
    kapt "com.google.dagger:hilt-android-compiler:$dagger_hilt_version"
    kapt "androidx.hilt:hilt-compiler:$dagger_hilt_viewmodel_version"

    // http
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_logging_version"
    //Gson
    implementation "com.google.code.gson:gson:$gson_version"

    //Timber
    implementation "com.jakewharton.timber:timber:$timber_version"

    implementation project(path: ':library')
    implementation project(path: ':library_android')
    implementation project(path: ':library_common_data')
    implementation project(path: ':lib_selfie')
//    implementation project(path: ':lib_selfie_api')
    implementation project(path: ':lib_widget')
}